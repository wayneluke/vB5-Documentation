We're happy to announce the release of vBulletin 5.2.0 Connect.  All together over 170 issues have been resolved in vBulletin 5.2.0 Connect. This is a major update to the software.

PHP Hooks
In addition to the other methods used for expanding vBulletin 5, we have implemented PHP Hooks in 5.2.0 Alpha 2. This will allow expansion of the software through third-party PHP Classes. This implementation is currently fairly basic and we're looking for feedback from third-party developers on both the implementation and placement of hooks. The current implementation is basic. More on PHP Hooks below.

Themes
Themes have been updated to retain user customizations better. When upgrading to previous versions, the logo would be overwritten on vBulletin Cloud installations due to permissions and how themes are configured behind the scenes. To resolve this and improve using Themes, a number of changes were made to the system. Previously in order to retain the logo or style variable changes, you had to make a child of the Theme you wanted to work with. In 5.2.0 and higher, we will automatically create these child for you. The original themes will remain read-only and we will hide these copies from you, except in Debug Mode. This will make creating changes to your themes easier, especially for Cloud customers. During the upgrade, we will copy your logo and Additional CSS over to the new child theme for you.

[note]This doesn't change existing permissions. Cloud customers have not gained access to edit templates.[/note]

Protocol-Relative Links
In order to better support running sites under both HTTP and HTTPS, we have converted all internal links to protocol-less links. This allows the browser to request the proper URL for including Javascript, CSS, and linking through forms and other tools. 
For more information see: https://blog.servertastic.com/using-protocol-relative-links-to-fix-mixed-content-warnings

Responsive Markup 
In order to facilitate cleanup and enhancement of the responsive capabilities of themes, a new Responsive Markup Library has been added. This library will be used more in the future.

[warning]This version of vBulletin should not be deployed on Production Servers at this time. [/warning]

Current Issues: http://tracker.vbulletin.com/secure/ReleaseNote.jspa?projectId=10091&version=11322

Discuss this Release: [node]4334160[/node]


-------------------
New Post
-------------------
Hooks and You (From [user]Kevin Sours[/user]).
The basic code is in place, but this is really still a work in progress. I don't expect it to be really complete for some time. Attached here is a sample product using the new style hooks. New is the "product.php" class, which is basically something that contains information about your product for the system. Right now it has the "AutoInstall" flag and the array of hook classes and not much else. Note that the class will be instantiated so if you need to run some sort of initialization code on startup you can put it in the constructor. Note that hooks *require* a product be installed to work. API extensions don't currently, but likely will in the future.

Hooks are fairly simple. Each hook is a static function defined on a hook class which will be called for each class that defines it. Hooks.txt contains a list of the currently implemented hooks.
Each class also has an $order static. The default is 10 and the classes will be invoked in order starting with 1.

Variables passed to the the hook function are in the form of a $params array. We did it this way to allow us to change the list without breaking backwards compatibility. Most params are read/write, meaning you can change them and the system will pick up the change. We're no longer doing eval style code insertions for reasons of security and stability -- basically we need to no what variable a hook can change to better manage the hooks.

Currently the list is very limited. There are two. That isn't so much as start as a bare demonstration that the concept works. However I don't want to guess what you guys need, so feel free to tell me (JIRAs preferred)

For testing purposes you can add hooks on your own:

vB::getHooks()->invoke('hookNewHook', array('readonly' => $readonlyLocalVar, 'readwrite' => &$readwriteLocalVar));

on the front end use:

$api = Api_InterfaceAbstract::instance();
$api->invokeHook('hookFrontendNewHook', array('readonly' => $readonlyLocalVar, 'readwrite' => &$readwriteLocalVar));

Please create JIRAs specifying where you would like hooks placed in the existing code.